$bgColor: #060A1B;
$fontColor: white;

$cardColor: #141529;

$breakpoints: ('small': 768px,
  'medium': 992px,
  'large': 1200px) !default;

/// Mixin to manage responsive breakpoints
/// @author Hugo Giraudel
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints
@mixin respond-to($breakpoint) {

  // If the key exists in the map
  @if map-has-key($breakpoints, $breakpoint) {

    // Prints a media query based on the value
    @media only screen and (max-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  }

  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
    +"Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

.container {
  min-height: 100vh;
  display: flex;
  background: $bgColor;
  height: 100vh;

  .main {
    width: 95vw;
    height: 100%;
    display: flex;
    flex-flow: column wrap;

    .title-card {
      color: $fontColor;
      height: 20vh;
      display: grid !important;
      place-items: start !important;
      padding: 0px 35px !important;
      width: 50% !important;

      .title-description {
        margin-top: -30px;
      }

      @include respond-to('small') {
        width: 100vw !important;
        height: 30vh !important;
      }
    }

    .stat-card {
      background: $cardColor;
      border-radius: 20px;
      display: grid;
      place-items: center;
      margin: 20px;
      min-width: 50%;
      max-width: max-content;
      height: 70%;
      flex: 1;
      max-height: max-content;

      @include respond-to('small') {
        width: fit-content;
        height: 100vh;
      }
    }

    .table-container {
      height: 70%;
      width: 50%;
      padding: 30px;
      flex: 1 50%;
      padding-top: 60px;
      padding-bottom: 50px;

      @include respond-to('small') {
        width: max-content !important;
        height: 100vh;
      }
    }

    @include respond-to('small') {
      flex-flow: column nowrap;
    }
  }

}